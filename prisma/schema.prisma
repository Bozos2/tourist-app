// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  coverImage    String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  newsletter Boolean @default(false)
  gender String?
  dob DateTime?
  country String?
  bio String?
  urls Json?
  locations Locations[]
  comments Comment[]
  favorites Favorites[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}



model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}


model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum LocationStatus {
  Pending
  Accepted
  Rejected
}

model Locations {
  id String @id @default(cuid())
  userId String 
  name String
  country String
  city String
  category String
  description String
  dateArrived DateTime
  images String[]
  video String?
  address String
  openingTime String?
  closingTime String?
  price Float?
  specialFeatures String[]
  idealFor String[]
  rating    Float @default(0)
  createdAt  DateTime   @default(now())
  comments Comment[]
  status    LocationStatus @default(Pending)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade,onUpdate: Cascade)

  favorites Favorites[]
}


model Comment {
  id     String @id @default(cuid())
  locationId String?
  userId String?
  createdAt  DateTime   @default(now())
  title String
  rating Int
  
  locations   Locations? @relation(fields: [locationId], references: [id],onDelete: Cascade,onUpdate: Cascade) 
  user      User? @relation(fields: [userId], references: [id],onDelete: Cascade,onUpdate: Cascade)
}

model Favorites {
  id         String    @id @default(cuid())
  userId     String
  locationId String
  createdAt  DateTime  @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  location Locations @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId]) 
}